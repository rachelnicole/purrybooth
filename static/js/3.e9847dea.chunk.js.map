{"version":3,"sources":["../node_modules/@silvia-odwyer/photon/photon.js"],"names":["__webpack_require__","r","__webpack_exports__","d","draw_text_with_border","draw_text","watermark","blend","create_gradient","apply_gradient","run","get_image_data","putImageData","open_image","to_raw_pixels","base64_to_image","base64_to_vec","to_image_data","noise_reduction","sharpen","edge_detection","identity","box_blur","gaussian_blur","detect_horizontal_lines","detect_vertical_lines","detect_45_deg_lines","detect_135_deg_lines","laplace","edge_one","emboss","sobel_horizontal","prewitt_horizontal","sobel_vertical","lch","hsl","hsv","hue_rotate_hsl","hue_rotate_hsv","hue_rotate_lch","saturate_hsl","saturate_lch","saturate_hsv","lighten_lch","lighten_hsl","lighten_hsv","darken_lch","darken_hsl","darken_hsv","desaturate_hsv","desaturate_hsl","desaturate_lch","crop","fliph","flipv","resize","offset","offset_red","offset_green","offset_blue","multiple_offsets","primary","colorize","solarize","inc_brightness","tint","horizontal_strips","vertical_strips","neue","lix","ryo","filter","alter_channel","alter_red_channel","alter_green_channel","alter_blue_channel","alter_two_channels","alter_channels","remove_channel","remove_red_channel","remove_green_channel","remove_blue_channel","swap_channels","selective_hue_rotate","selective_lighten","selective_desaturate","selective_saturate","selective_greyscale","monochrome","sepia","grayscale","grayscale_human_corrected","desaturate","decompose_min","decompose_max","grayscale_shades","r_grayscale","g_grayscale","b_grayscale","single_channel_grayscale","threshold","__wbg_error_4bb6c2a97407129a","__wbg_new_59cb74e423758ede","__wbg_stack_558ba5917b466edd","__widl_instanceof_CanvasRenderingContext2D","__widl_f_get_image_data_CanvasRenderingContext2D","__widl_f_put_image_data_CanvasRenderingContext2D","__widl_f_create_element_Document","__widl_f_body_Document","__widl_instanceof_HTMLCanvasElement","__widl_f_get_context_HTMLCanvasElement","__widl_f_width_HTMLCanvasElement","__widl_f_set_width_HTMLCanvasElement","__widl_f_height_HTMLCanvasElement","__widl_f_set_height_HTMLCanvasElement","__widl_f_new_with_u8_clamped_array_and_sh_ImageData","__widl_f_width_ImageData","__widl_f_height_ImageData","__widl_f_data_ImageData","__widl_f_append_child_Node","__widl_f_set_text_content_Node","__widl_instanceof_Window","__widl_f_document_Window","__wbg_newnoargs_a172f39151049128","__wbg_call_8a9c8b0a32a202ff","__wbindgen_debug_string","__wbindgen_rethrow","__wbindgen_throw","PhotonImage","Rgb","__wbindgen_object_clone_ref","__wbindgen_object_drop_ref","passStringToWasm","_Users_rachel_Documents_repos_purrybooth_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_Users_rachel_Documents_repos_purrybooth_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","_photon_bg__WEBPACK_IMPORTED_MODULE_2__","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","cachegetUint8Memory","getUint8Memory","buffer","Uint8Array","photon_img","text","x","y","ptr1","len1","ptr","img","photon_image","photon_image2","blend_mode","ptr2","len2","width","height","__wrap","image","passArray8ToWasm","arg","length","set","getArrayU8FromWasm","len","subarray","encodeInto","size","mem","code","charCodeAt","slice","view","written","buf","encode","cachedGlobalArgumentPtr","globalArgumentPtr","cachegetUint32Memory","getUint32Memory","Uint32Array","heap","Array","getObject","idx","fill","undefined","push","heap_next","dropObject","takeObject","ret","addHeapObject","obj","stack_pointer","addBorrowedObject","Error","canvas","ctx","new_image","imgdata","retptr","rustptr","rustlen","realRet","base64","ptr0","len0","mode","amt","degrees","level","x1","y1","x2","y2","channel_index","offset_amt","channel_index2","brightness","r_offset","g_offset","b_offset","num_strips","filter_name","channel","channel1","amt1","channel2","amt2","r_amt","g_amt","b_amt","min_filter","ref_color","num_shades","cachedTextDecoder","TextDecoder","getStringFromWasm","decode","arg0","arg1","varg0","console","error","stack","retlen","CanvasRenderingContext2D","handleError","exnptr","e","arg2","arg3","arg4","getImageData","varg1","createElement","isLikeNone","val","body","HTMLCanvasElement","getContext","cachegetUint8ClampedMemory","getClampedArrayU8FromWasm","Uint8ClampedArray","ImageData","data","appendChild","textContent","Window","document","Function","call","i","len_ptr","toString","Object","prototype","debug","debug_str","type","concat","description","name","isArray","_debug","_i","className","builtInMatches","exec","JSON","stringify","_","message","raw_pixels","this","key","value","freePhotonImage","create","img_data","vec","freeRgb","g","b"],"mappings":"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","file":"static/js/3.e9847dea.chunk.js","sourcesContent":["import _classCallCheck from \"/Users/rachel/Documents/repos/purrybooth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rachel/Documents/repos/purrybooth/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as wasm from './photon_bg';\nvar WASM_VECTOR_LEN = 0;\nvar cachedTextEncoder = new TextEncoder('utf-8');\nvar cachegetUint8Memory = null;\n\nfunction getUint8Memory() {\n  if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory;\n}\n\nvar passStringToWasm;\n\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n  passStringToWasm = function passStringToWasm(arg) {\n    var size = arg.length;\n\n    var ptr = wasm.__wbindgen_malloc(size);\n\n    var offset = 0;\n    {\n      var mem = getUint8Memory();\n\n      for (; offset < arg.length; offset++) {\n        var code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n      }\n    }\n\n    if (offset !== arg.length) {\n      arg = arg.slice(offset);\n      ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n      var view = getUint8Memory().subarray(ptr + offset, ptr + size);\n      var ret = cachedTextEncoder.encodeInto(arg, view);\n      offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n  };\n} else {\n  passStringToWasm = function passStringToWasm(arg) {\n    var size = arg.length;\n\n    var ptr = wasm.__wbindgen_malloc(size);\n\n    var offset = 0;\n    {\n      var mem = getUint8Memory();\n\n      for (; offset < arg.length; offset++) {\n        var code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n      }\n    }\n\n    if (offset !== arg.length) {\n      var buf = cachedTextEncoder.encode(arg.slice(offset));\n      ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n      getUint8Memory().set(buf, ptr + offset);\n      offset += buf.length;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n  };\n}\n/**\n* Add bordered-text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter\\'s 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter\\'s 1st pixel should be drawn.\n*\n* # Example\n* ```\n* // For example to draw the string \\\"Welcome to Photon!\\\" at 10, 10:\n* use photon::text::draw_text_with_border;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/cats.PNG\\\");\n*\n* draw_text_with_border(&mut img, \\\"Welcome to Photon!\\\", 10, 10);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n* @returns {void}\n*/\n\n\nexport function draw_text_with_border(photon_img, text, x, y) {\n  var ptr1 = passStringToWasm(text);\n  var len1 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.draw_text_with_border(photon_img.ptr, ptr1, len1, x, y);\n  } finally {\n    wasm.__wbindgen_free(ptr1, len1 * 1);\n  }\n}\n/**\n* Add text to an image.\n* The only font available as of now is Roboto.\n* Note: A graphic design/text-drawing library is currently being developed, so stay tuned.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `text` - Text string to be drawn to the image.\n* * `x` - x-coordinate of where first letter\\'s 1st pixel should be drawn.\n* * `y` - y-coordinate of where first letter\\'s 1st pixel should be drawn.\n*\n* # Example\n* ```\n* // For example to draw the string \\\"Welcome to Photon!\\\" at 10, 10:\n* use photon::text::draw_text;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/cats.PNG\\\");\n*\n* draw_text(&mut img, \\\"Welcome to Photon!\\\", 10, 10);\n* ```\n* @param {PhotonImage} photon_img\n* @param {string} text\n* @param {number} x\n* @param {number} y\n* @returns {void}\n*/\n\nexport function draw_text(photon_img, text, x, y) {\n  var ptr1 = passStringToWasm(text);\n  var len1 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.draw_text(photon_img.ptr, ptr1, len1, x, y);\n  } finally {\n    wasm.__wbindgen_free(ptr1, len1 * 1);\n  }\n}\n/**\n* Add a watermark to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `watermark` - The watermark to be placed onto the `img` image.\n* * `x` - The x coordinate where the watermark\\'s top corner should be positioned.\n* * `y` - The y coordinate where the watermark\\'s top corner should be positioned.\n* # Example\n*\n* ```\n* // For example, to add a watermark to an image at x: 30, y: 40:\n* use photon::multiple;\n* photon::multiple::watermark(img, watermark, 30, 40);\n* ```\n* @param {PhotonImage} img\n* @param {PhotonImage} watermark\n* @param {number} x\n* @param {number} y\n* @returns {void}\n*/\n\nexport function watermark(img, watermark, x, y) {\n  var ptr1 = watermark.ptr;\n  watermark.ptr = 0;\n  return wasm.watermark(img.ptr, ptr1, x, y);\n}\n/**\n* Blend two images together.\n* The `blend_mode` (3rd param) determines which blending mode to use; change this for varying effects.\n* The blend modes available include: `overlay`, `over`, `atop`, `xor`, `multiply`, `burn`, `soft_light`, `hard_light`\n* `difference`, `lighten`, `darken`, `dodge`, `plus`, `exclusion` (more to come)\n* NOTE: The first image must be smaller than the second image passed as params.\n* If the first image were larger than the second, then there would be overflowing pixels which would have no corresponding pixels\n* in the second image.\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n* * `img2` - The 2nd DynamicImage to be blended with the first.\n* * `blend_mode` - The blending mode to use. See above for complete list of blend modes available.\n* # Example\n*\n* ```\n* // For example, to add a watermark to an image at x: 30, y: 40:\n* use photon::multiple;\n* photon::multiple::watermark(img, watermark, 30, 40);\n* ```\n* @param {PhotonImage} photon_image\n* @param {PhotonImage} photon_image2\n* @param {string} blend_mode\n* @returns {void}\n*/\n\nexport function blend(photon_image, photon_image2, blend_mode) {\n  var ptr2 = passStringToWasm(blend_mode);\n  var len2 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.blend(photon_image.ptr, photon_image2.ptr, ptr2, len2);\n  } finally {\n    wasm.__wbindgen_free(ptr2, len2 * 1);\n  }\n}\n/**\n* @param {number} width\n* @param {number} height\n* @returns {PhotonImage}\n*/\n\nexport function create_gradient(width, height) {\n  return PhotonImage.__wrap(wasm.create_gradient(width, height));\n}\n/**\n* Apply a gradient to an image.\n* @param {PhotonImage} image\n* @returns {void}\n*/\n\nexport function apply_gradient(image) {\n  return wasm.apply_gradient(image.ptr);\n}\n\nfunction passArray8ToWasm(arg) {\n  var ptr = wasm.__wbindgen_malloc(arg.length * 1);\n\n  getUint8Memory().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nfunction getArrayU8FromWasm(ptr, len) {\n  return getUint8Memory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nvar cachedGlobalArgumentPtr = null;\n\nfunction globalArgumentPtr() {\n  if (cachedGlobalArgumentPtr === null) {\n    cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n  }\n\n  return cachedGlobalArgumentPtr;\n}\n\nvar cachegetUint32Memory = null;\n\nfunction getUint32Memory() {\n  if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n    cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint32Memory;\n}\n\nvar heap = new Array(32);\nheap.fill(undefined);\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) {\n  return heap[idx];\n}\n\nvar heap_next = heap.length;\n\nfunction dropObject(idx) {\n  if (idx < 36) return;\n  heap[idx] = heap_next;\n  heap_next = idx;\n}\n\nfunction takeObject(idx) {\n  var ret = getObject(idx);\n  dropObject(idx);\n  return ret;\n}\n\nfunction addHeapObject(obj) {\n  if (heap_next === heap.length) heap.push(heap.length + 1);\n  var idx = heap_next;\n  heap_next = heap[idx];\n  heap[idx] = obj;\n  return idx;\n}\n/**\n* Create a PhotonImage from a byte slice.\n* [temp] Check if WASM is supported.\n* @returns {void}\n*/\n\n\nexport function run() {\n  return wasm.run();\n}\nvar stack_pointer = 32;\n\nfunction addBorrowedObject(obj) {\n  if (stack_pointer == 1) throw new Error('out of js stack');\n  heap[--stack_pointer] = obj;\n  return stack_pointer;\n}\n/**\n* Get the ImageData from a 2D canvas context\n* @param {any} canvas\n* @param {any} ctx\n* @returns {any}\n*/\n\n\nexport function get_image_data(canvas, ctx) {\n  try {\n    return takeObject(wasm.get_image_data(addBorrowedObject(canvas), addBorrowedObject(ctx)));\n  } finally {\n    heap[stack_pointer++] = undefined;\n    heap[stack_pointer++] = undefined;\n  }\n}\n/**\n* Place a PhotonImage onto a 2D canvas.\n* @param {any} canvas\n* @param {any} ctx\n* @param {PhotonImage} new_image\n* @returns {void}\n*/\n\nexport function putImageData(canvas, ctx, new_image) {\n  var ptr2 = new_image.ptr;\n  new_image.ptr = 0;\n  return wasm.putImageData(addHeapObject(canvas), addHeapObject(ctx), ptr2);\n}\n/**\n* Convert a HTML5 Canvas Element to a PhotonImage.\n*\n* This converts the ImageData found in the canvas context to a PhotonImage,\n* which can then have effects or filters applied to it.\n* @param {any} canvas\n* @param {any} ctx\n* @returns {PhotonImage}\n*/\n\nexport function open_image(canvas, ctx) {\n  return PhotonImage.__wrap(wasm.open_image(addHeapObject(canvas), addHeapObject(ctx)));\n}\n/**\n* Convert ImageData to a raw pixel vec of u8s.\n* @param {any} imgdata\n* @returns {Uint8Array}\n*/\n\nexport function to_raw_pixels(imgdata) {\n  var retptr = globalArgumentPtr();\n  wasm.to_raw_pixels(retptr, addHeapObject(imgdata));\n  var mem = getUint32Memory();\n  var rustptr = mem[retptr / 4];\n  var rustlen = mem[retptr / 4 + 1];\n  var realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n\n  wasm.__wbindgen_free(rustptr, rustlen * 1);\n\n  return realRet;\n}\n/**\n* Convert a base64 string to a PhotonImage.\n* @param {string} base64\n* @returns {PhotonImage}\n*/\n\nexport function base64_to_image(base64) {\n  var ptr0 = passStringToWasm(base64);\n  var len0 = WASM_VECTOR_LEN;\n\n  try {\n    return PhotonImage.__wrap(wasm.base64_to_image(ptr0, len0));\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n/**\n* Convert a base64 string to a Vec of u8s.\n* @param {string} base64\n* @returns {Uint8Array}\n*/\n\nexport function base64_to_vec(base64) {\n  var ptr0 = passStringToWasm(base64);\n  var len0 = WASM_VECTOR_LEN;\n  var retptr = globalArgumentPtr();\n\n  try {\n    wasm.base64_to_vec(retptr, ptr0, len0);\n    var mem = getUint32Memory();\n    var rustptr = mem[retptr / 4];\n    var rustlen = mem[retptr / 4 + 1];\n    var realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n\n    wasm.__wbindgen_free(rustptr, rustlen * 1);\n\n    return realRet;\n  } finally {\n    wasm.__wbindgen_free(ptr0, len0 * 1);\n  }\n}\n/**\n* Convert a PhotonImage to JS-compatible ImageData.\n* @param {PhotonImage} photon_image\n* @returns {any}\n*/\n\nexport function to_image_data(photon_image) {\n  var ptr0 = photon_image.ptr;\n  photon_image.ptr = 0;\n  return takeObject(wasm.to_image_data(ptr0));\n}\n/**\n* Noise reduction.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to sharpen an image:\n* use photon::conv::sharpen;\n* photon::channels::sharpen(img);\n* ```\n* Adds a constant to a select R, G, or B channel\\'s value.\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function noise_reduction(photon_image) {\n  return wasm.noise_reduction(photon_image.ptr);\n}\n/**\n* Sharpen an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to sharpen an image:\n* use photon::conv::sharpen;\n* photon::channels::sharpen(img);\n* ```\n* Adds a constant to a select R, G, or B channel\\'s value.\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function sharpen(photon_image) {\n  return wasm.sharpen(photon_image.ptr);\n}\n/**\n* Apply edge detection to an image, to create a dark version with its edges highlighted.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon::channels;\n* photon::conv::edge_detection(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function edge_detection(photon_image) {\n  return wasm.edge_detection(photon_image.ptr);\n}\n/**\n* Apply an identity kernel convolution to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply an identity kernel convolution:\n* use photon::channels;\n* photon::conv::identity(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function identity(photon_image) {\n  return wasm.identity(photon_image.ptr);\n}\n/**\n* Apply a box blur effect.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a box blur effect:\n* use photon::channels;\n* photon::conv::box_blur(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function box_blur(photon_image) {\n  return wasm.box_blur(photon_image.ptr);\n}\n/**\n* Apply a gaussian blur effect.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a gaussian blur effect to an image:\n* use photon::channels;\n* photon::conv::gaussian_blur(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function gaussian_blur(photon_image) {\n  return wasm.gaussian_blur(photon_image.ptr);\n}\n/**\n* Detect horizontal lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to display the horizontal lines in an image:\n* use photon::channels;\n* photon::conv::detect_horizontal_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function detect_horizontal_lines(photon_image) {\n  return wasm.detect_horizontal_lines(photon_image.ptr);\n}\n/**\n* Detect vertical lines in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to display the vertical lines in an image:\n* use photon::channels;\n* photon::conv::detect_vertical_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function detect_vertical_lines(photon_image) {\n  return wasm.detect_vertical_lines(photon_image.ptr);\n}\n/**\n* Detect lines at a forty five degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to display the lines at a forty five degree angle in an image:\n* use photon::channels;\n* photon::conv::detect_fortyfivedeg_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function detect_45_deg_lines(photon_image) {\n  return wasm.detect_45_deg_lines(photon_image.ptr);\n}\n/**\n* Detect lines at a 135 degree angle in an image, and highlight these only.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to display the lines at a 135 degree angle in an image:\n* use photon::channels;\n* photon::conv::detect_hundredthirtyfive_deg_lines(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function detect_135_deg_lines(photon_image) {\n  return wasm.detect_135_deg_lines(photon_image.ptr);\n}\n/**\n* Apply a standard laplace convolution.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a laplace effect:\n* use photon::conv;\n* photon::conv::laplace(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function laplace(photon_image) {\n  return wasm.laplace(photon_image.ptr);\n}\n/**\n* Preset edge effect.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply this effect:\n* use photon::conv;\n* photon::conv::edge_one(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function edge_one(photon_image) {\n  return wasm.edge_one(photon_image.ptr);\n}\n/**\n* Apply an emboss effect to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply an emboss effect:\n* use photon::conv;\n* photon::conv::emboss(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function emboss(photon_image) {\n  return wasm.emboss(photon_image.ptr);\n}\n/**\n* Apply a horizontal Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a horizontal Sobel filter:\n* use photon::conv;\n* photon::conv::sobel_horizontal(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function sobel_horizontal(photon_image) {\n  return wasm.sobel_horizontal(photon_image.ptr);\n}\n/**\n* Apply a horizontal Prewitt convolution to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a horizontal Prewitt convolution effect:\n* use photon::conv;\n* photon::conv::prewitt_horizontal(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function prewitt_horizontal(photon_image) {\n  return wasm.prewitt_horizontal(photon_image.ptr);\n}\n/**\n* Apply a vertical Sobel filter to an image.\n*\n* # Arguments\n* * `img` - A DynamicImage that contains a view into the image.\n*\n* # Example\n*\n* ```\n* // For example, to apply a vertical Sobel filter:\n* use photon::conv;\n* photon::conv::sobel_vertical(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function sobel_vertical(photon_image) {\n  return wasm.sobel_vertical(photon_image.ptr);\n}\n/**\n* Apply gamma correction.\n* Image manipulation effects in the LCh colour space\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon::color_spaces::lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lch(&mut img, \\\"saturate\\\", 0.1);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function lch(photon_image, mode, amt) {\n  var ptr1 = passStringToWasm(mode);\n  var len1 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.lch(photon_image.ptr, ptr1, len1, amt);\n  } finally {\n    wasm.__wbindgen_free(ptr1, len1 * 1);\n  }\n}\n/**\n* Image manipulation effects in the HSL colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon::color_spaces::hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hsl(&mut img, \\\"saturate\\\", 0.1);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function hsl(photon_image, mode, amt) {\n  var ptr1 = passStringToWasm(mode);\n  var len1 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.hsl(photon_image.ptr, ptr1, len1, amt);\n  } finally {\n    wasm.__wbindgen_free(ptr1, len1 * 1);\n  }\n}\n/**\n* Image manipulation in the HSV colour space.\n*\n* Effects include:\n* * **saturate** - Saturation increase.\n* * **desaturate** - Desaturate the image.\n* * **shift_hue** - Hue rotation by a specified number of degrees.\n* * **darken** - Decrease the brightness.\n* * **lighten** - Increase the brightness.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `mode` - The effect desired to be applied. Choose from: `saturate`, `desaturate`, `shift_hue`, `darken`, `lighten`\n* * `amt` - A float value from 0 to 1 which represents the amount the effect should be increased by.\n*\n* # Example\n* ```\n* // For example to increase the saturation by 10%:\n* use photon::color_spaces::hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hsv(&mut img, \\\"saturate\\\", 0.1);\n* ```\n* @param {PhotonImage} photon_image\n* @param {string} mode\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function hsv(photon_image, mode, amt) {\n  var ptr1 = passStringToWasm(mode);\n  var len1 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.hsv(photon_image.ptr, ptr1, len1, amt);\n  } finally {\n    wasm.__wbindgen_free(ptr1, len1 * 1);\n  }\n}\n/**\n* Shift hue by a specified number of degrees in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - The number of degrees to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon::color_spaces::hue_rotate_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hue_rotate_hsl(&mut img, 120);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n* @returns {void}\n*/\n\nexport function hue_rotate_hsl(img, degrees) {\n  return wasm.hue_rotate_hsl(img.ptr, degrees);\n}\n/**\n* Shift hue by a specified number of degrees in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - The number of degrees to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSV colour space:\n* use photon::color_spaces::hue_rotate_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hue_rotate_hsv(&mut img, 120);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n* @returns {void}\n*/\n\nexport function hue_rotate_hsv(img, degrees) {\n  return wasm.hue_rotate_hsv(img.ptr, degrees);\n}\n/**\n* Shift hue by a specified number of degrees in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `mode` - The number of degrees to shift the hue by, or hue rotate by.\n*\n* # Example\n* ```\n* // For example to hue rotate/shift the hue by 120 degrees in the HSL colour space:\n* use photon::color_spaces::hue_rotate_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* hue_rotate_lch(&mut img, 120);\n* ```\n* @param {PhotonImage} img\n* @param {number} degrees\n* @returns {void}\n*/\n\nexport function hue_rotate_lch(img, degrees) {\n  return wasm.hue_rotate_lch(img.ptr, degrees);\n}\n/**\n* Increase the image\\'s saturation by converting each pixel\\'s colour to the HSL colour space\n* and increasing the colour\\'s saturation.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 10% in the HSL colour space:\n* use photon::color_spaces::saturate_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* saturate_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function saturate_hsl(img, level) {\n  return wasm.saturate_hsl(img.ptr, level);\n}\n/**\n* Increase the image\\'s saturation in the LCh colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 40% in the Lch colour space:\n* use photon::color_spaces::saturate_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* saturate_lch(&mut img, 0.4);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function saturate_lch(img, level) {\n  return wasm.saturate_lch(img.ptr, level);\n}\n/**\n* Increase the image\\'s saturation in the HSV colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level by which to increase the saturation by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Increasing saturation by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to increase saturation by 30% in the HSV colour space:\n* use photon::color_spaces::saturate_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* saturate_hsv(&mut img, 0.3);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function saturate_hsv(img, level) {\n  return wasm.saturate_hsv(img.ptr, level);\n}\n/**\n* Lighten an image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the LCh colour space:\n* use photon::color_spaces::lighten_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lighten_lch(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function lighten_lch(img, level) {\n  return wasm.lighten_lch(img.ptr, level);\n}\n/**\n* Lighten an image by a specified amount in the HSL colour space.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the HSL colour space:\n* use photon::color_spaces::lighten_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lighten_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function lighten_hsl(img, level) {\n  return wasm.lighten_hsl(img.ptr, level);\n}\n/**\n* Lighten an image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to lighten the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Lightening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to lighten an image by 10% in the HSV colour space:\n* use photon::color_spaces::lighten_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* lighten_hsv(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function lighten_hsv(img, level) {\n  return wasm.lighten_hsv(img.ptr, level);\n}\n/**\n* Darken the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the LCh colour space:\n* use photon::color_spaces::darken_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* darken_lch(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function darken_lch(img, level) {\n  return wasm.darken_lch(img.ptr, level);\n}\n/**\n* Darken the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the HSL colour space:\n* use photon::color_spaces::darken_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* darken_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function darken_hsl(img, level) {\n  return wasm.darken_hsl(img.ptr, level);\n}\n/**\n* Darken the image\\'s colours by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to darken the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Darkening by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to darken an image by 10% in the HSV colour space:\n* use photon::color_spaces::darken_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* darken_hsv(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function darken_hsv(img, level) {\n  return wasm.darken_hsv(img.ptr, level);\n}\n/**\n* Desaturate the image by a specified amount in the HSV colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the HSV colour space:\n* use photon::color_spaces::desaturate_hsv;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/mountains.PNG\\\");\n*\n* desaturate_hsv(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function desaturate_hsv(img, level) {\n  return wasm.desaturate_hsv(img.ptr, level);\n}\n/**\n* Desaturate the image by a specified amount in the HSL colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon::color_spaces::desaturate_hsl;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* desaturate_hsl(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function desaturate_hsl(img, level) {\n  return wasm.desaturate_hsl(img.ptr, level);\n}\n/**\n* Desaturate the image by a specified amount in the LCh colour space.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `level` - Float value from 0 to 1 representing the level to which to desaturate the image by.\n* The `level` must be from 0 to 1 in floating-point, `f32` format.\n* Desaturating by 80% would be represented by a `level` of 0.8\n*\n* # Example\n* ```\n* // For example to desaturate an image by 10% in the LCh colour space:\n* use photon::color_spaces::desaturate_lch;\n*\n* // Open the image. A PhotonImage is returned.\n* let img: PhotonImage = open_image(\\\"images/flowers.PNG\\\");\n*\n* desaturate_lch(&mut img, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {number} level\n* @returns {void}\n*/\n\nexport function desaturate_lch(img, level) {\n  return wasm.desaturate_lch(img.ptr, level);\n}\n/**\n* Crop an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* ## Example\n*\n* ```\n* // For example, to crop an image at (0, 0) to (500, 800)\n* use photon::transform;\n* let img = photon::open_image(\\\"img.jpg\\\");\n* let cropped_img = photon::transform::crop(&mut img, 0, 0, 500, 800);\n* // Write the contents of this image in JPG format.\n* photon::helpers::save_image(cropped_img, \\\"cropped_image.png\\\");\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} x1\n* @param {number} y1\n* @param {number} x2\n* @param {number} y2\n* @returns {PhotonImage}\n*/\n\nexport function crop(photon_image, x1, y1, x2, y2) {\n  return PhotonImage.__wrap(wasm.crop(photon_image.ptr, x1, y1, x2, y2));\n}\n/**\n* Flip an image horizontally.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* ## Example\n*\n* ```\n* // For example, to flip an image horizontally:\n* use photon::transform;\n* let img = photon::open_image(\\\"img.jpg\\\");\n* let new_img = photon::transform::fliph(&mut img);\n* // Write the contents of this image in JPG format.\n* photon::helpers::save_image(new_img, \\\"new_image.png\\\");\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function fliph(photon_image) {\n  return wasm.fliph(photon_image.ptr);\n}\n/**\n* Flip an image vertically.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n*\n* ## Example\n*\n* ```\n* // For example, to flip an image vertically:\n* use photon::transform;\n* let img = photon::open_image(\\\"img.jpg\\\");\n* let new_img = photon::transform::flipv(&mut img);\n* // Write the contents of this image in JPG format.\n* photon::helpers::save_image(new_img, \\\"new_image.png\\\");\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function flipv(photon_image) {\n  return wasm.flipv(photon_image.ptr);\n}\n/**\n* Resize an image on the web.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `width` - New width.\n* * `height` - New height.\n* @param {PhotonImage} photon_img\n* @param {number} width\n* @param {number} height\n* @returns {any}\n*/\n\nexport function resize(photon_img, width, height) {\n  return takeObject(wasm.resize(photon_img.ptr, width, height));\n}\n/**\n* Adds an offset to the image by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```\n* // For example, to offset pixels by 30 pixels on the red channel:\n* use photon::effects;\n* photon::effects::offset(img, 0, 30);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel_index\n* @param {number} offset\n* @returns {void}\n*/\n\nexport function offset(photon_image, channel_index, offset) {\n  return wasm.offset(photon_image.ptr, channel_index, offset);\n}\n/**\n* Adds an offset to the red channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the red channel by.\n* # Example\n*\n* ```\n* // For example, to add an offset to the red channel by 30 pixels.\n* use photon::effects;\n* photon::effects::offset_red(img, 30);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n* @returns {void}\n*/\n\nexport function offset_red(img, offset_amt) {\n  return wasm.offset_red(img.ptr, offset_amt);\n}\n/**\n* Adds an offset to the green channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset you want to move the green channel by.\n* # Example\n*\n* ```\n* // For example, to add an offset to the green channel by 30 pixels.\n* use photon::effects;\n* photon::effects::offset_green(img, 40);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n* @returns {void}\n*/\n\nexport function offset_green(img, offset_amt) {\n  return wasm.offset_green(img.ptr, offset_amt);\n}\n/**\n* Adds an offset to the blue channel by a certain number of pixels.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset_amt` - The offset you want to move the blue channel by.\n* # Example\n* // For example, to add an offset to the green channel by 40 pixels.\n* use photon::effects;\n* photon::effects::offset_blue(img, 40);\n* ```\n* @param {PhotonImage} img\n* @param {number} offset_amt\n* @returns {void}\n*/\n\nexport function offset_blue(img, offset_amt) {\n  return wasm.offset_blue(img.ptr, offset_amt);\n}\n/**\n* Adds multiple offsets to the image by a certain number of pixels (on two channels).\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `offset` - The offset is added to the pixels in the image.\n* # Example\n*\n* ```\n* // For example, to add a 30-pixel offset to both the red and blue channels:\n* use photon::effects;\n* photon::effects::multiple_offsets(img, 30, 0, 2);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} offset\n* @param {number} channel_index\n* @param {number} channel_index2\n* @returns {void}\n*/\n\nexport function multiple_offsets(photon_image, offset, channel_index, channel_index2) {\n  return wasm.multiple_offsets(photon_image.ptr, offset, channel_index, channel_index2);\n}\n/**\n* Reduces an image to the primary colours.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to add a primary colour effect to an image of type `DynamicImage`:\n* use photon::effects;\n* photon::effects::primary(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function primary(photon_image) {\n  return wasm.primary(photon_image.ptr);\n}\n/**\n* Colorizes the green channels of the image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon::effects;\n* photon::effects::colorize(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function colorize(photon_image) {\n  return wasm.colorize(photon_image.ptr);\n}\n/**\n* Applies a solarizing effect to an image.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* # Example\n*\n* ```\n* // For example, to colorize an image of type `PhotonImage`:\n* use photon::effects;\n* photon::effects::solarize(img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function solarize(photon_image) {\n  return wasm.solarize(photon_image.ptr);\n}\n/**\n* Increase the brightness of an image by a factor.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `brightness` - A u8 to add to the brightness.\n* # Example\n*\n* ```\n* photon::effects::inc_brightness(img, 10);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} brightness\n* @returns {void}\n*/\n\nexport function inc_brightness(photon_image, brightness) {\n  return wasm.inc_brightness(photon_image.ptr, brightness);\n}\n/**\n* Tint an image by adding an offset to averaged RGB channel values.\n*\n* # Arguments\n* * `img` - A PhotonImage that contains a view into the image.\n* * `r_offset` - The amount the  R channel should be incremented by.\n* * `g_offset` - The amount the G channel should be incremented by.\n* * `b_offset` - The amount the B channel should be incremented by.\n* # Example\n*\n* ```\n* // For example, to tint an image of type `PhotonImage`:\n* photon::tint(img, 10, 20, 15);\n* ```\n*\n* @param {PhotonImage} photon_image\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n* @returns {void}\n*/\n\nexport function tint(photon_image, r_offset, g_offset, b_offset) {\n  return wasm.tint(photon_image.ptr, r_offset, g_offset, b_offset);\n}\n/**\n* Horizontal strips. Divide an image into a series of equal-height strips, for an artistic effect.\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n* @returns {void}\n*/\n\nexport function horizontal_strips(photon_image, num_strips) {\n  return wasm.horizontal_strips(photon_image.ptr, num_strips);\n}\n/**\n* Vertical strips. Divide an image into a series of equal-width strips, for an artistic effect.\n* @param {PhotonImage} photon_image\n* @param {number} num_strips\n* @returns {void}\n*/\n\nexport function vertical_strips(photon_image, num_strips) {\n  return wasm.vertical_strips(photon_image.ptr, num_strips);\n}\n/**\n* Solarization on the Blue channel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::neue(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function neue(photon_image) {\n  return wasm.neue(photon_image.ptr);\n}\n/**\n* Solarization on the Red and Green channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::lix(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function lix(photon_image) {\n  return wasm.lix(photon_image.ptr);\n}\n/**\n* Solarization on the Red and Blue channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* # Example\n*\n* ```\n* photon::filters::ryo(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function ryo(photon_image) {\n  return wasm.ryo(photon_image.ptr);\n}\n/**\n* Apply a filter to an image. Over 20 filters are available.\n* The filters are as follows:\n* * **oceanic**: Add an aquamarine-tinted hue to an image.\n* * **islands**: Aquamarine tint.\n* * **marine**: Add a green/blue mixed hue to an image.\n* * **seagreen**: Dark green hue, with tones of blue.\n* * **flagblue**: Royal blue tint\n* * **liquid**: Blue-inspired tint.\n* * **diamante**: Custom filter with a blue/turquoise tint.\n* * **radio**: Fallout-style radio effect.\n* * **twenties**: Slight-blue tinted historical effect.\n* * **rosetint**: Rose-tinted filter.\n* * **mauve**: Purple-infused filter.\n* * **bluechrome**: Blue monochrome effect.\n* * **vintage**: Vintage filter with a red tint.\n* * **perfume**: Increase the blue channel, with moderate increases in the Red and Green channels.\n* * **serenity**: Custom filter with an increase in the Blue channel\\'s values.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `blend_mode` - The blending mode to use. See above for complete list of blend modes available.\n* # Example\n*\n* ```\n* // For example, to add a filter called \\\"vintage\\\" to an image:\n* use photon::filters;\n* photon::filters::filter(&mut img, \\\"vintage\\\");\n* ```\n* @param {PhotonImage} img\n* @param {string} filter_name\n* @returns {void}\n*/\n\nexport function filter(img, filter_name) {\n  var ptr1 = passStringToWasm(filter_name);\n  var len1 = WASM_VECTOR_LEN;\n\n  try {\n    return wasm.filter(img.ptr, ptr1, len1);\n  } finally {\n    wasm.__wbindgen_free(ptr1, len1 * 1);\n  }\n}\n/**\n* Alter a select channel by incrementing or decrementing its value by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel you wish to alter, it should be either 0, 1 or 2,\n* representing R, G, or B respectively. (O=Red, 1=Green, 2=Blue)\n* * `amount` - The amount to increment/decrement the channel\\'s value by for that pixel.\n* A positive value will increment/decrement the channel\\'s value, a negative value will decrement the channel\\'s value.\n*\n* ## Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon::channels;\n* let img = photon::open_image(\\\"img.jpg\\\");\n* photon::channels::alter_channel(&mut img, 0, 10);\n* // Write the contents of this image in JPG format.\n* photon::helpers::save_image(img, \\\"new_image.png\\\");\n* ```\n*\n* Adds a constant to a select R, G, or B channel\\'s value.\n*\n* ### Decrease a channel\\'s value\n* // For example, to decrease the Green channel for all pixels by 20:\n* ```\n* use photon::channels;\n* photon::channels::alter_channel(&mut img, 1, -20);\n* ```\n* **Note**: Note the use of a minus symbol when decreasing the channel.\n* @param {PhotonImage} img\n* @param {number} channel\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function alter_channel(img, channel, amt) {\n  return wasm.alter_channel(img.ptr, channel, amt);\n}\n/**\n* Increment or decrement every pixel\\'s Red channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage. See the PhotonImage struct for details.\n* * `amt` - The amount to increment or decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Red channel for all pixels by 10:\n* use photon::channels;\n* photon::channels::alter_red_channel(&mut img, 10);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function alter_red_channel(photon_image, amt) {\n  return wasm.alter_red_channel(photon_image.ptr, amt);\n}\n/**\n* Increment or decrement every pixel\\'s Green channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment/decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Green channel for all pixels by 20:\n* use photon::channels;\n* photon::channels::alter_green_channel(&mut img, 10);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function alter_green_channel(img, amt) {\n  return wasm.alter_green_channel(img.ptr, amt);\n}\n/**\n* Increment or decrement every pixel\\'s Blue channel by a constant.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `amt` - The amount to increment or decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the Blue channel for all pixels by 10:\n* use photon::channels;\n* photon::channels::alter_blue_channel(&mut img, 10);\n* ```\n* @param {PhotonImage} img\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function alter_blue_channel(img, amt) {\n  return wasm.alter_blue_channel(img.ptr, amt);\n}\n/**\n* Increment/decrement two channels\\' values simultaneously by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt1` - The amount to increment/decrement the channel\\'s value by for that pixel.\n* * `channel2` -A usize from 0 to 2 that represents either the R, G or B channels.\n* * `amt2` - The amount to increment/decrement the channel\\'s value by for that pixel.\n*\n* # Example\n*\n* ```\n* // For example, to increase the values of the Red and Blue channels per pixel:\n* photon::channels::inc_two_channels(&mut img, 0, 10, 2, 20);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel1\n* @param {number} amt1\n* @param {number} channel2\n* @param {number} amt2\n* @returns {void}\n*/\n\nexport function alter_two_channels(img, channel1, amt1, channel2, amt2) {\n  return wasm.alter_two_channels(img.ptr, channel1, amt1, channel2, amt2);\n}\n/**\n* Increment all 3 channels\\' values by adding an amt to each channel per pixel.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `r_amt` - The amount to increment/decrement the Red channel by.\n* * `g_amt` - The amount to increment/decrement the Green channel by.\n* * `b_amt` - The amount to increment/decrement the Blue channel by.\n*\n* # Example\n*\n* ```\n* // For example, to increase the values of the Red channel by 10, the Green channel by 20,\n* // and the Blue channel by 50:\n* // photon::channels::alter_channels(&mut img, 10, 20, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} r_amt\n* @param {number} g_amt\n* @param {number} b_amt\n* @returns {void}\n*/\n\nexport function alter_channels(img, r_amt, g_amt, b_amt) {\n  return wasm.alter_channels(img.ptr, r_amt, g_amt, b_amt);\n}\n/**\n* Set a certain channel to zero, thus removing the channel\\'s influence in the pixels\\' final rendered colour.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel` - The channel to be removed; must be a usize from 0 to 2, with 0 representing Red, 1 representing Green, and 2 representing Blue.\n* * `min_filter` - Minimum filter. Value between 0 and 255. Only remove the channel if the current pixel\\'s channel value is less than this minimum filter. To completely\n* remove the channel, set this value to 255, to leave the channel as is, set to 0, and to set a channel to zero for a pixel whose red value is greater than 50,\n* then channel would be 0 and min_filter would be 50.\n*\n* # Example\n*\n* ```\n* // For example, to remove the Red channel with a min_filter of 100:\n* photon::channels::remove_channel(&mut img, 0, 100);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel\n* @param {number} min_filter\n* @returns {void}\n*/\n\nexport function remove_channel(img, channel, min_filter) {\n  return wasm.remove_channel(img.ptr, channel, min_filter);\n}\n/**\n* Remove the Red channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the red channel for red channel pixel values less than 50:\n* photon::channels::remove_red_channel(&mut img, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n* @returns {void}\n*/\n\nexport function remove_red_channel(img, min_filter) {\n  return wasm.remove_red_channel(img.ptr, min_filter);\n}\n/**\n* Remove the Green channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the green channel for green channel pixel values less than 50:\n* photon::channels::remove_green_channel(img, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n* @returns {void}\n*/\n\nexport function remove_green_channel(img, min_filter) {\n  return wasm.remove_green_channel(img.ptr, min_filter);\n}\n/**\n* Remove the Blue channel\\'s influence in an image.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `min_filter` - Only remove the channel if the current pixel\\'s channel value is less than this minimum filter.\n*\n* # Example\n*\n* ```\n* // For example, to remove the blue channel for blue channel pixel values less than 50:\n* photon::channels::remove_blue_channel(&mut img, 50);\n* ```\n* @param {PhotonImage} img\n* @param {number} min_filter\n* @returns {void}\n*/\n\nexport function remove_blue_channel(img, min_filter) {\n  return wasm.remove_blue_channel(img.ptr, min_filter);\n}\n/**\n* Swap two channels.\n*\n* # Arguments\n* * `img` - A PhotonImage.\n* * `channel1` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Red would be represented by 0, Green by 1, and Blue by 2.\n* * `channel2` - An index from 0 to 2, representing the Red, Green or Blue channels respectively. Same as above.\n*\n* # Example\n*\n* ```\n* // For example, to swap the values of the Red channel with the values of the Blue channel:\n* photon::channels::swap_channels(&mut img, 0, 2);\n* ```\n* @param {PhotonImage} img\n* @param {number} channel1\n* @param {number} channel2\n* @returns {void}\n*/\n\nexport function swap_channels(img, channel1, channel2) {\n  return wasm.swap_channels(img.ptr, channel1, channel2);\n}\n/**\n* Selective hue rotation.\n*\n* Only rotate the hue of a pixel if its RGB values are within a specified range.\n* This function only rotates a pixel\\'s hue to another  if it is visually similar to the colour specified.\n* For example, if a user wishes all pixels that are blue to be changed to red, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `degrees` - The amount of degrees to hue rotate by.\n*\n* # Example\n*\n* ```\n* // For example, to only rotate the pixels that are of RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_hue_rotate(&mut img, ref_color, 180);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n* @param {number} degrees\n* @returns {void}\n*/\n\nexport function selective_hue_rotate(photon_image, ref_color, degrees) {\n  var ptr1 = ref_color.ptr;\n  ref_color.ptr = 0;\n  return wasm.selective_hue_rotate(photon_image.ptr, ptr1, degrees);\n}\n/**\n* Selectively lighten an image.\n*\n* Only lighten the hue of a pixel if its colour matches or is similar to the RGB colour specified.\n* For example, if a user wishes all pixels that are blue to be lightened, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The level from 0 to 1 to lighten the hue by. Increasing by 10% would have an `amt` of 0.1\n*\n* # Example\n*\n* ```\n* // For example, to only lighten the pixels that are of or similar to RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_lighten(&mut img, ref_color, 0.2);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function selective_lighten(img, ref_color, amt) {\n  var ptr1 = ref_color.ptr;\n  ref_color.ptr = 0;\n  return wasm.selective_lighten(img.ptr, ptr1, amt);\n}\n/**\n* Selectively desaturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only desaturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to be desaturated by 0.1, they can selectively specify  only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of desaturate the colour by.\n*\n* # Example\n*\n* ```\n* // For example, to only desaturate the pixels that are similar to the RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_desaturate(&mut img, ref_color, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function selective_desaturate(img, ref_color, amt) {\n  var ptr1 = ref_color.ptr;\n  ref_color.ptr = 0;\n  return wasm.selective_desaturate(img.ptr, ptr1, amt);\n}\n/**\n* Selectively saturate pixel colours which are similar to the reference colour provided.\n*\n* Similarity between two colours is calculated via the CIE76 formula.\n* Only saturates the hue of a pixel if its similarity to the reference colour is within the range in the algorithm.\n* For example, if a user wishes all pixels that are blue to have an increase in saturation by 10%, they can selectively specify only the blue pixels to be changed.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n* * `amt` - The amount of saturate the colour by.\n*\n* # Example\n*\n* ```\n* // For example, to only increase the saturation of pixels that are similar to the RGB value RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_saturate(&mut img, ref_color, 0.1);\n* ```\n* @param {PhotonImage} img\n* @param {Rgb} ref_color\n* @param {number} amt\n* @returns {void}\n*/\n\nexport function selective_saturate(img, ref_color, amt) {\n  var ptr1 = ref_color.ptr;\n  ref_color.ptr = 0;\n  return wasm.selective_saturate(img.ptr, ptr1, amt);\n}\n/**\n* Selectively changes a pixel to greyscale if it is *not* visually similar or close to the colour specified.\n* Only changes the colour of a pixel if its RGB values are within a specified range.\n*\n* (Similarity between two colours is calculated via the CIE76 formula.)\n* For example, if a user wishes all pixels that are *NOT* blue to be displayed in greyscale, they can selectively specify only the blue pixels to be\n* kept in the photo.\n* # Arguments\n* * `img` - A PhotonImage.\n* * `ref_color` - The `RGB` value of the reference color (to be compared to)\n*\n* # Example\n*\n* ```\n* // For example, to greyscale all pixels that are *not* visually similar to the RGB colour RGB{20, 40, 60}:\n* let ref_color = Rgb{20, 40, 60};\n* photon::channels::selective_greyscale(&mut img, ref_color);\n* ```\n* @param {PhotonImage} photon_image\n* @param {Rgb} ref_color\n* @returns {void}\n*/\n\nexport function selective_greyscale(photon_image, ref_color) {\n  var ptr0 = photon_image.ptr;\n  photon_image.ptr = 0;\n  var ptr1 = ref_color.ptr;\n  ref_color.ptr = 0;\n  return wasm.selective_greyscale(ptr0, ptr1);\n}\n/**\n* Apply a monochrome effect of a certain colour.\n*\n* It does so by averaging the R, G, and B values of a pixel, and then adding a\n* separate value to that averaged value for each channel to produce a tint.\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `r_offset` - The value to add to the Red channel per pixel.\n* * `g_offset` - The value to add to the Green channel per pixel.\n* * `b_offset` - The value to add to the Blue channel per pixel.\n*\n* # Example\n*\n* ```\n* // For example, to apply a monochrome effect to an image:\n* use photon::monochrome;\n* monochrome::monochroma(&mut img, 40, 50, 100);\n* ```\n*\n* @param {PhotonImage} photon_image\n* @param {number} r_offset\n* @param {number} g_offset\n* @param {number} b_offset\n* @returns {void}\n*/\n\nexport function monochrome(photon_image, r_offset, g_offset, b_offset) {\n  return wasm.monochrome(photon_image.ptr, r_offset, g_offset, b_offset);\n}\n/**\n* Convert an image to sepia.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to tint an image of type `PhotonImage`:\n* use photon::monochrome;\n* monochrome::sepia(&mut img);\n* ```\n*\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function sepia(photon_image) {\n  return wasm.sepia(photon_image.ptr);\n}\n/**\n* Convert an image to grayscale using the conventional averaging algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to convert an image of type `PhotonImage` to greyscale:\n* use photon::monochrome;\n* monochrome::grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function grayscale(photon_image) {\n  return wasm.grayscale(photon_image.ptr);\n}\n/**\n* Convert an image to grayscale with a human corrected factor, to account for human vision.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to convert an image of type `PhotonImage` to greyscale with a human corrected factor:\n* use photon::monochrome;\n* monochrome::grayscale_human_corrected(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function grayscale_human_corrected(photon_image) {\n  return wasm.grayscale_human_corrected(photon_image.ptr);\n}\n/**\n* Desaturate an image by getting the min/max of each pixel\\'s RGB values.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to desaturate an image:\n* use photon::monochrome;\n* monochrome::desaturate(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function desaturate(photon_image) {\n  return wasm.desaturate(photon_image.ptr);\n}\n/**\n* Uses a min. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to decompose an image with min decomposition:\n* monochrome::decompose_min(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function decompose_min(photon_image) {\n  return wasm.decompose_min(photon_image.ptr);\n}\n/**\n* Uses a max. decomposition algorithm to convert an image to greyscale.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* // For example, to decompose an image with max decomposition:\n* monochrome::decompose_max(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function decompose_max(photon_image) {\n  return wasm.decompose_max(photon_image.ptr);\n}\n/**\n* Employ only a limited number of gray shades in an image.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `num_shades` - The number of grayscale shades to be displayed in the image.\n* # Example\n*\n* ```\n* // For example, to limit an image to four shades of gray only:\n* monochrome::grayscale_shades(&mut img, 4);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} num_shades\n* @returns {void}\n*/\n\nexport function grayscale_shades(photon_image, num_shades) {\n  return wasm.grayscale_shades(photon_image.ptr, num_shades);\n}\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Red channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* monochrome::r_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function r_grayscale(photon_image) {\n  return wasm.r_grayscale(photon_image.ptr);\n}\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Green channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* monochrome::g_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function g_grayscale(photon_image) {\n  return wasm.g_grayscale(photon_image.ptr);\n}\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to the Blue channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* # Example\n*\n* ```\n* monochrome::b_grayscale(&mut img);\n* ```\n* @param {PhotonImage} photon_image\n* @returns {void}\n*/\n\nexport function b_grayscale(photon_image) {\n  return wasm.b_grayscale(photon_image.ptr);\n}\n/**\n* Convert an image to grayscale by setting a pixel\\'s 3 RGB values to a chosen channel\\'s value.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `channel` - A usize representing the channel from 0 to 2. O represents the Red channel, 1 the Green channel, and 2 the Blue channel.\n* # Example\n* To grayscale using only values from the Red channel:\n* ```\n* monochrome::single_channel_grayscale(&mut img, 0);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} channel\n* @returns {void}\n*/\n\nexport function single_channel_grayscale(photon_image, channel) {\n  return wasm.single_channel_grayscale(photon_image.ptr, channel);\n}\n/**\n* Threshold an image using a standard thresholding algorithm.\n*\n* # Arguments\n* * `photon_image` - A PhotonImage.\n* * `threshold` - The amount the image should be thresholded by from 0 to 255.\n* # Example\n*\n* ```\n* // For example, to threshold an image of type `PhotonImage`:\n* use photon::monochrome;\n* monochrome::threshold(&mut img, 30);\n* ```\n* @param {PhotonImage} photon_image\n* @param {number} threshold\n* @returns {void}\n*/\n\nexport function threshold(photon_image, threshold) {\n  return wasm.threshold(photon_image.ptr, threshold);\n}\nvar cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n  return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nexport function __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n  var varg0 = getStringFromWasm(arg0, arg1);\n  varg0 = varg0.slice();\n\n  wasm.__wbindgen_free(arg0, arg1 * 1);\n\n  console.error(varg0);\n}\nexport function __wbg_new_59cb74e423758ede() {\n  return addHeapObject(new Error());\n}\nexport function __wbg_stack_558ba5917b466edd(ret, arg0) {\n  var retptr = passStringToWasm(getObject(arg0).stack);\n  var retlen = WASM_VECTOR_LEN;\n  var mem = getUint32Memory();\n  mem[ret / 4] = retptr;\n  mem[ret / 4 + 1] = retlen;\n}\nexport function __widl_instanceof_CanvasRenderingContext2D(idx) {\n  return getObject(idx) instanceof CanvasRenderingContext2D ? 1 : 0;\n}\n\nfunction handleError(exnptr, e) {\n  var view = getUint32Memory();\n  view[exnptr / 4] = 1;\n  view[exnptr / 4 + 1] = addHeapObject(e);\n}\n\nexport function __widl_f_get_image_data_CanvasRenderingContext2D(arg0, arg1, arg2, arg3, arg4, exnptr) {\n  try {\n    return addHeapObject(getObject(arg0).getImageData(arg1, arg2, arg3, arg4));\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\nexport function __widl_f_put_image_data_CanvasRenderingContext2D(arg0, arg1, arg2, arg3, exnptr) {\n  try {\n    getObject(arg0).putImageData(getObject(arg1), arg2, arg3);\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\nexport function __widl_f_create_element_Document(arg0, arg1, arg2, exnptr) {\n  var varg1 = getStringFromWasm(arg1, arg2);\n\n  try {\n    return addHeapObject(getObject(arg0).createElement(varg1));\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\n\nfunction isLikeNone(x) {\n  return x === undefined || x === null;\n}\n\nexport function __widl_f_body_Document(arg0) {\n  var val = getObject(arg0).body;\n  return isLikeNone(val) ? 0 : addHeapObject(val);\n}\nexport function __widl_instanceof_HTMLCanvasElement(idx) {\n  return getObject(idx) instanceof HTMLCanvasElement ? 1 : 0;\n}\nexport function __widl_f_get_context_HTMLCanvasElement(arg0, arg1, arg2, exnptr) {\n  var varg1 = getStringFromWasm(arg1, arg2);\n\n  try {\n    var val = getObject(arg0).getContext(varg1);\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\nexport function __widl_f_width_HTMLCanvasElement(arg0) {\n  return getObject(arg0).width;\n}\nexport function __widl_f_set_width_HTMLCanvasElement(arg0, arg1) {\n  getObject(arg0).width = arg1 >>> 0;\n}\nexport function __widl_f_height_HTMLCanvasElement(arg0) {\n  return getObject(arg0).height;\n}\nexport function __widl_f_set_height_HTMLCanvasElement(arg0, arg1) {\n  getObject(arg0).height = arg1 >>> 0;\n}\nvar cachegetUint8ClampedMemory = null;\n\nfunction getUint8ClampedMemory() {\n  if (cachegetUint8ClampedMemory === null || cachegetUint8ClampedMemory.buffer !== wasm.memory.buffer) {\n    cachegetUint8ClampedMemory = new Uint8ClampedArray(wasm.memory.buffer);\n  }\n\n  return cachegetUint8ClampedMemory;\n}\n\nfunction getClampedArrayU8FromWasm(ptr, len) {\n  return getUint8ClampedMemory().subarray(ptr / 1, ptr / 1 + len);\n}\n\nexport function __widl_f_new_with_u8_clamped_array_and_sh_ImageData(arg0, arg1, arg2, arg3, exnptr) {\n  var varg0 = getClampedArrayU8FromWasm(arg0, arg1);\n\n  try {\n    return addHeapObject(new ImageData(varg0, arg2 >>> 0, arg3 >>> 0));\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\nexport function __widl_f_width_ImageData(arg0) {\n  return getObject(arg0).width;\n}\nexport function __widl_f_height_ImageData(arg0) {\n  return getObject(arg0).height;\n}\nexport function __widl_f_data_ImageData(ret, arg0) {\n  var retptr = passArray8ToWasm(getObject(arg0).data);\n  var retlen = WASM_VECTOR_LEN;\n  var mem = getUint32Memory();\n  mem[ret / 4] = retptr;\n  mem[ret / 4 + 1] = retlen;\n}\nexport function __widl_f_append_child_Node(arg0, arg1, exnptr) {\n  try {\n    return addHeapObject(getObject(arg0).appendChild(getObject(arg1)));\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\nexport function __widl_f_set_text_content_Node(arg0, arg1, arg2) {\n  var varg1 = arg1 == 0 ? undefined : getStringFromWasm(arg1, arg2);\n  getObject(arg0).textContent = varg1;\n}\nexport function __widl_instanceof_Window(idx) {\n  return getObject(idx) instanceof Window ? 1 : 0;\n}\nexport function __widl_f_document_Window(arg0) {\n  var val = getObject(arg0).document;\n  return isLikeNone(val) ? 0 : addHeapObject(val);\n}\nexport function __wbg_newnoargs_a172f39151049128(arg0, arg1) {\n  var varg0 = getStringFromWasm(arg0, arg1);\n  return addHeapObject(new Function(varg0));\n}\nexport function __wbg_call_8a9c8b0a32a202ff(arg0, arg1, exnptr) {\n  try {\n    return addHeapObject(getObject(arg0).call(getObject(arg1)));\n  } catch (e) {\n    handleError(exnptr, e);\n  }\n}\nexport function __wbindgen_debug_string(i, len_ptr) {\n  var debug_str = function debug_str(val) {\n    // primitive types\n    var type = typeof val;\n\n    if (type == 'number' || type == 'boolean' || val == null) {\n      return \"\".concat(val);\n    }\n\n    if (type == 'string') {\n      return \"\\\"\".concat(val, \"\\\"\");\n    }\n\n    if (type == 'symbol') {\n      var description = val.description;\n\n      if (description == null) {\n        return 'Symbol';\n      } else {\n        return \"Symbol(\".concat(description, \")\");\n      }\n    }\n\n    if (type == 'function') {\n      var name = val.name;\n\n      if (typeof name == 'string' && name.length > 0) {\n        return \"Function(\".concat(name, \")\");\n      } else {\n        return 'Function';\n      }\n    } // objects\n\n\n    if (Array.isArray(val)) {\n      var length = val.length;\n      var _debug = '[';\n\n      if (length > 0) {\n        _debug += debug_str(val[0]);\n      }\n\n      for (var _i = 1; _i < length; _i++) {\n        _debug += ', ' + debug_str(val[_i]);\n      }\n\n      _debug += ']';\n      return _debug;\n    } // Test for built-in\n\n\n    var builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    var className;\n\n    if (builtInMatches.length > 1) {\n      className = builtInMatches[1];\n    } else {\n      // Failed to match the standard '[object ClassName]'\n      return toString.call(val);\n    }\n\n    if (className == 'Object') {\n      // we're a user defined class or Object\n      // JSON.stringify avoids problems with cycles, and is generally much\n      // easier than looping through ownProperties of `val`.\n      try {\n        return 'Object(' + JSON.stringify(val) + ')';\n      } catch (_) {\n        return 'Object';\n      }\n    } // errors\n\n\n    if (val instanceof Error) {\n      return \"\".concat(val.name, \": \").concat(val.message, \"\\n        \").concat(val.stack);\n    } // TODO we could test for more things here, like `Set`s and `Map`s.\n\n\n    return className;\n  };\n\n  var toString = Object.prototype.toString;\n  var val = getObject(i);\n  var debug = debug_str(val);\n  var ptr = passStringToWasm(debug);\n  getUint32Memory()[len_ptr / 4] = WASM_VECTOR_LEN;\n  return ptr;\n}\nexport function __wbindgen_rethrow(idx) {\n  throw takeObject(idx);\n}\nexport function __wbindgen_throw(ptr, len) {\n  throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freePhotonImage(ptr) {\n  wasm.__wbg_photonimage_free(ptr);\n}\n/**\n* Provides the image\\'s height, width, and contains the image\\'s raw pixels.\n* For use when communicating between JS and WASM, and also natively.\n*/\n\n\nexport var PhotonImage = /*#__PURE__*/function () {\n  _createClass(PhotonImage, [{\n    key: \"free\",\n    value: function free() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      freePhotonImage(ptr);\n    }\n    /**\n    * @param {Uint8Array} raw_pixels\n    * @param {number} width\n    * @param {number} height\n    * @returns {}\n    */\n\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(PhotonImage.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }]);\n\n  function PhotonImage(raw_pixels, width, height) {\n    _classCallCheck(this, PhotonImage);\n\n    var ptr0 = passArray8ToWasm(raw_pixels);\n    var len0 = WASM_VECTOR_LEN;\n    this.ptr = wasm.photonimage_new(ptr0, len0, width, height);\n  }\n  /**\n  * Create a new PhotonImage from a base64 string.\n  * @param {string} base64\n  * @returns {PhotonImage}\n  */\n\n\n  _createClass(PhotonImage, [{\n    key: \"get_width\",\n\n    /**\n    * Get the width of the PhotonImage.\n    * @returns {number}\n    */\n    value: function get_width() {\n      return wasm.photonimage_get_width(this.ptr) >>> 0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n\n  }, {\n    key: \"get_raw_pixels\",\n    value: function get_raw_pixels() {\n      var retptr = globalArgumentPtr();\n      wasm.photonimage_get_raw_pixels(retptr, this.ptr);\n      var mem = getUint32Memory();\n      var rustptr = mem[retptr / 4];\n      var rustlen = mem[retptr / 4 + 1];\n      var realRet = getArrayU8FromWasm(rustptr, rustlen).slice();\n\n      wasm.__wbindgen_free(rustptr, rustlen * 1);\n\n      return realRet;\n    }\n    /**\n    * Get the height of the PhotonImage.\n    * @returns {number}\n    */\n\n  }, {\n    key: \"get_height\",\n    value: function get_height() {\n      return wasm.photonimage_get_height(this.ptr) >>> 0;\n    }\n    /**\n    * Convert the PhotonImage\\'s raw pixels to JS-compatible ImageData.\n    * @returns {any}\n    */\n\n  }, {\n    key: \"get_image_data\",\n    value: function get_image_data() {\n      return takeObject(wasm.photonimage_get_image_data(this.ptr));\n    }\n    /**\n    * Convert ImageData to raw pixels, and update the PhotonImage\\'s raw pixels to this.\n    * @param {any} img_data\n    * @returns {void}\n    */\n\n  }, {\n    key: \"set_imgdata\",\n    value: function set_imgdata(img_data) {\n      return wasm.photonimage_set_imgdata(this.ptr, addHeapObject(img_data));\n    }\n  }], [{\n    key: \"new_from_base64\",\n    value: function new_from_base64(base64) {\n      var ptr0 = passStringToWasm(base64);\n      var len0 = WASM_VECTOR_LEN;\n\n      try {\n        return PhotonImage.__wrap(wasm.photonimage_new_from_base64(ptr0, len0));\n      } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n      }\n    }\n    /**\n    * @param {Uint8Array} vec\n    * @returns {PhotonImage}\n    */\n\n  }, {\n    key: \"new_from_byteslice\",\n    value: function new_from_byteslice(vec) {\n      var ptr0 = passArray8ToWasm(vec);\n      var len0 = WASM_VECTOR_LEN;\n      return PhotonImage.__wrap(wasm.photonimage_new_from_byteslice(ptr0, len0));\n    }\n  }]);\n\n  return PhotonImage;\n}();\n\nfunction freeRgb(ptr) {\n  wasm.__wbg_rgb_free(ptr);\n}\n/**\n* RGB color type.\n*/\n\n\nexport var Rgb = /*#__PURE__*/function () {\n  function Rgb() {\n    _classCallCheck(this, Rgb);\n  }\n\n  _createClass(Rgb, [{\n    key: \"free\",\n    value: function free() {\n      var ptr = this.ptr;\n      this.ptr = 0;\n      freeRgb(ptr);\n    }\n    /**\n    * @param {number} r\n    * @param {number} g\n    * @param {number} b\n    * @returns {Rgb}\n    */\n\n  }, {\n    key: \"set_red\",\n\n    /**\n    * @param {number} r\n    * @returns {void}\n    */\n    value: function set_red(r) {\n      return wasm.rgb_set_red(this.ptr, r);\n    }\n    /**\n    * @param {number} g\n    * @returns {void}\n    */\n\n  }, {\n    key: \"set_green\",\n    value: function set_green(g) {\n      return wasm.rgb_set_green(this.ptr, g);\n    }\n    /**\n    * @param {number} b\n    * @returns {void}\n    */\n\n  }, {\n    key: \"set_blue\",\n    value: function set_blue(b) {\n      return wasm.rgb_set_blue(this.ptr, b);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"get_red\",\n    value: function get_red() {\n      return wasm.rgb_get_red(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"get_green\",\n    value: function get_green() {\n      return wasm.rgb_get_green(this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n\n  }, {\n    key: \"get_blue\",\n    value: function get_blue() {\n      return wasm.rgb_get_blue(this.ptr);\n    }\n  }], [{\n    key: \"__wrap\",\n    value: function __wrap(ptr) {\n      var obj = Object.create(Rgb.prototype);\n      obj.ptr = ptr;\n      return obj;\n    }\n  }, {\n    key: \"new\",\n    value: function _new(r, g, b) {\n      return Rgb.__wrap(wasm.rgb_new(r, g, b));\n    }\n  }]);\n\n  return Rgb;\n}();\nexport function __wbindgen_object_clone_ref(idx) {\n  return addHeapObject(getObject(idx));\n}\nexport function __wbindgen_object_drop_ref(i) {\n  dropObject(i);\n}"],"sourceRoot":""}